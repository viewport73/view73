#ifndef __Teapot_h__
#define __Teapot_h__

#include "Model.h"

namespace Game
{
	class Teapot : public Model
	{
	private:

		unsigned int m_VerticesCount;
		float*  m_Vertices;
		unsigned int m_TriangleCount;
		unsigned int* m_Indices;

	public:
		
		Teapot()
		{	
			float vertices[] = {
					3.223438f, 5.861634f, 1.351491f,
					3.459798f, 5.864512f, 0.000067f,
					3.377432f, 5.857877f, 1.437011f,
					3.661173f, 5.857877f, 0.000000f,
					2.479242f, 5.860818f, 2.466830f,
					2.599433f, 5.857877f, 2.599433f,
					1.364384f, 5.861863f, 3.212546f,
					1.437011f, 5.857877f, 3.377432f,
					0.001201f, 5.864993f, 3.467836f,
					0.000000f, 5.857877f, 3.661173f,
					-1.446216f, 5.865699f, 3.206995f,
					-1.437011f, 5.857877f, 3.377432f,
					-2.527255f, 5.868129f, 2.488265f,
					-2.599433f, 5.857877f, 2.599433f,
					-3.228625f, 5.867365f, 1.396007f,
					-3.377432f, 5.857877f, 1.437011f,
					-3.460255f, 5.862782f, -0.001435f,
					-3.661173f, 5.857877f, 0.000000f,
					-3.220681f, 5.861385f, -1.355303f,
					-3.377432f, 5.857877f, -1.437011f,
					-2.479277f, 5.860820f, -2.466809f,
					-2.599433f, 5.857877f, -2.599433f,
					-1.364393f, 5.861823f, -3.212494f,
					-1.437011f, 5.857877f, -3.377432f,
					0.000067f, 5.864512f, -3.459798f,
					0.000000f, 5.857877f, -3.661173f,
					1.351491f, 5.861634f, -3.223438f,
					1.437011f, 5.857877f, -3.377432f,
					2.466830f, 5.860818f, -2.479242f,
					2.599433f, 5.857877f, -2.599433f,
					3.212494f, 5.861823f, -1.364394f,
					3.377432f, 5.857877f, -1.437011f,
					4.306486f, 3.546859f, 1.832243f,
					4.681828f, 3.529062f, 0.000034f,
					4.503243f, 2.196704f, 1.916014f,
					4.881564f, 2.196704f, 0.000000f,
					3.314482f, 3.546734f, 3.314482f,
					3.465911f, 2.196704f, 3.465911f,
					1.832157f, 3.605051f, 4.286837f,
					1.916014f, 2.196704f, 4.503243f,
					-0.000000f, 3.532809f, 4.672608f,
					0.000000f, 2.196704f, 4.881564f,
					-1.887730f, 3.537730f, 4.296916f,
					-1.916014f, 2.196704f, 4.503243f,
					-3.314482f, 3.546735f, 3.314482f,
					-3.465911f, 2.196704f, 3.465911f,
					-4.286836f, 3.605051f, 1.832157f,
					-4.503243f, 2.196704f, 1.916014f,
					-4.672608f, 3.532809f, -0.000000f,
					-4.881564f, 2.196704f, 0.000000f,
					-4.296916f, 3.537730f, -1.887730f,
					-4.503243f, 2.196704f, -1.916014f,
					-3.314482f, 3.546735f, -3.314482f,
					-3.465911f, 2.196704f, -3.465911f,
					-1.832157f, 3.605051f, -4.286837f,
					-1.916014f, 2.196704f, -4.503243f,
					0.000000f, 3.532809f, -4.672608f,
					0.000000f, 2.196704f, -4.881564f,
					1.887730f, 3.537730f, -4.296916f,
					1.916014f, 2.196704f, -4.503243f,
					3.314482f, 3.546734f, -3.314482f,
					3.465911f, 2.196704f, -3.465911f,
					4.286837f, 3.605050f, -1.832157f,
					4.503243f, 2.196704f, -1.916014f,
					4.280644f, 1.334904f, 1.803000f,
					4.636419f, 1.341659f, 0.000005f,
					3.378674f, 0.364012f, 1.436222f,
					3.651884f, 0.373113f, 0.000000f,
					3.281145f, 1.356699f, 3.311180f,
					2.612916f, 0.359199f, 2.594525f,
					1.819096f, 1.337082f, 4.274538f,
					1.432844f, 0.374370f, 3.367140f,
					-0.000107f, 1.338221f, 4.643086f,
					0.000333f, 0.359732f, 3.665860f,
					-1.819417f, 1.339866f, 4.275774f,
					-1.432844f, 0.374370f, 3.367140f,
					-3.275016f, 1.332593f, 3.302810f,
					-2.599216f, 0.364238f, 2.600491f,
					-4.290106f, 1.355873f, 1.803052f,
					-3.373602f, 0.363149f, 1.449667f,
					-4.636456f, 1.341885f, -0.000012f,
					-3.650263f, 0.373916f, 0.000004f,
					-4.280481f, 1.332670f, -1.800629f,
					-3.378422f, 0.364149f, -1.436378f,
					-3.281249f, 1.356478f, -3.310942f,
					-2.611799f, 0.359897f, -2.594547f,
					-1.819096f, 1.337082f, -4.274538f,
					-1.432844f, 0.374370f, -3.367140f,
					0.000005f, 1.341659f, -4.636419f,
					-0.000969f, 0.358428f, -3.667472f,
					1.803000f, 1.334904f, -4.280644f,
					1.436222f, 0.364012f, -3.378674f,
					3.311180f, 1.356699f, -3.281145f,
					2.594543f, 0.359894f, -2.611808f,
					4.274538f, 1.337082f, -1.819096f,
					3.367140f, 0.374370f, -1.432844f,
					3.527975f, 0.181341f, -0.000005f,
					2.039388f, 0.031463f, 0.000000f,
					1.881335f, 0.031463f, -0.800460f,
					2.749937f, 0.071801f, 1.170416f,
					1.353764f, 0.129664f, 3.179227f,
					0.000000f, 0.082640f, 2.952583f,
					-1.335369f, 0.138178f, 3.138405f,
					-2.156013f, 0.080551f, 2.155503f,
					-3.492920f, 0.152097f, -0.000405f,
					-2.795095f, 0.080581f, -1.189620f,
					-0.000071f, -0.013468f, 0.000058f,
					-1.341017f, 0.131508f, -3.149502f,
					0.000012f, 0.084714f, -2.966938f,
					1.189620f, 0.080581f, -2.795095f,
					1.447965f, 0.031463f, -1.447965f,
					3.237068f, 0.177425f, -1.394029f,
					-3.905252f, 4.942584f, 0.000000f,
					-3.832466f, 5.071732f, 0.542100f,
					-6.179723f, 4.831544f, 0.000352f,
					-6.704523f, 4.393407f, 0.411882f,
					-6.590112f, 4.393408f, 0.000000f,
					-6.301559f, 5.014698f, 0.555976f,
					-6.734378f, 5.219194f, 0.444198f,
					-3.699310f, 5.405951f, 0.411882f,
					-7.103343f, 4.394788f, 0.554190f,
					-6.195119f, 5.435037f, -0.000154f,
					-3.661173f, 5.491760f, 0.000000f,
					-7.093523f, 5.028393f, 0.000000f,
					-7.322346f, 4.393408f, 0.000000f,
					-6.839997f, 5.130363f, -0.553477f,
					-3.699310f, 5.405951f, -0.411882f,
					-7.233214f, 4.392996f, -0.432125f,
					-3.833883f, 5.072013f, -0.519481f,
					-6.744576f, 4.394532f, -0.482102f,
					-6.365464f, 3.565665f, 0.000505f,
					-5.663377f, 2.694395f, 0.000000f,
					-4.881564f, 2.196704f, 0.000000f,
					-6.415854f, 3.233389f, 0.585904f,
					-4.792026f, 2.102247f, 0.522839f,
					-6.927365f, 3.291878f, 0.388014f,
					-5.803353f, 2.205687f, 0.411882f,
					-4.675623f, 1.578881f, 0.411882f,
					-7.062316f, 3.313526f, -0.007356f,
					-5.829274f, 2.115186f, 0.000000f,
					-4.637486f, 1.464469f, 0.000000f,
					-4.675623f, 1.578881f, -0.411882f,
					-6.269131f, 2.613697f, -0.556428f,
					-6.260508f, 3.103761f, -0.404620f,
					-4.790708f, 2.077116f, -0.536476f,
					5.409526f, 3.513689f, 0.818186f,
					5.320142f, 3.746982f, 0.000000f,
					4.149330f, 3.478114f, 0.000000f,
					4.149330f, 3.163482f, 0.906140f,
					5.827367f, 4.393408f, 0.000000f,
					6.105769f, 5.177128f, 0.000000f,
					6.819346f, 5.858757f, 0.345177f,
					6.590112f, 5.857877f, 0.000000f,
					4.149330f, 2.471292f, 1.208187f,
					6.290572f, 4.735315f, 0.621981f,
					7.322346f, 5.857877f, 0.457647f,
					5.802817f, 2.487202f, 0.818186f,
					4.149330f, 1.779101f, 0.906140f,
					6.058285f, 3.157522f, 1.002266f,
					6.858741f, 4.911657f, 0.431189f,
					7.827638f, 5.861901f, 0.332629f,
					5.892201f, 2.253910f, 0.000000f,
					4.149330f, 1.464469f, 0.000000f,
					6.559602f, 3.523879f, 0.000000f,
					6.998180f, 4.862496f, 0.000000f,
					8.048724f, 5.864148f, 0.000459f,
					5.830968f, 2.538426f, -0.859662f,
					4.149330f, 1.779101f, -0.906140f,
					6.858741f, 4.911657f, -0.431189f,
					7.828912f, 5.861417f, -0.330688f,
					5.537888f, 2.959857f, -1.073507f,
					4.149330f, 2.471292f, -1.208187f,
					7.315723f, 5.858434f, -0.457523f,
					5.409526f, 3.513689f, -0.818187f,
					4.149330f, 3.163482f, -0.906140f,
					6.276096f, 4.807812f, -0.621542f,
					6.818935f, 5.857877f, -0.343235f,
					7.029070f, 5.879517f, 0.306444f,
					6.825373f, 5.867284f, 0.000708f,
					7.665481f, 5.868493f, 0.186811f,
					7.810503f, 5.857877f, 0.000000f,
					7.648846f, 5.847300f, -0.226534f,
					6.954407f, 5.868316f, -0.191398f,
					0.000000f, 7.688464f, 0.000000f,
					0.676154f, 7.518765f, 0.675541f,
					0.879956f, 7.474187f, -0.000046f,
					0.485419f, 6.898958f, -0.000488f,
					0.488157f, 6.590112f, 0.000000f,
					0.412689f, 6.592579f, 0.280776f,
					0.000046f, 7.474187f, 0.879956f,
					0.008051f, 6.581898f, 0.501615f,
					-0.675542f, 7.518765f, 0.676154f,
					0.000488f, 6.898958f, 0.485419f,
					-0.280776f, 6.592579f, 0.412689f,
					-0.879956f, 7.474188f, 0.000046f,
					-0.450324f, 6.590112f, 0.191601f,
					-0.488156f, 6.590112f, 0.000000f,
					-0.676154f, 7.518765f, -0.675542f,
					-0.485419f, 6.898958f, 0.000488f,
					-0.412689f, 6.592579f, -0.280776f,
					-0.000046f, 7.474188f, -0.879956f,
					-0.191601f, 6.590112f, -0.450324f,
					0.000000f, 6.590112f, -0.488156f,
					0.675541f, 7.518765f, -0.676154f,
					-0.000488f, 6.898958f, -0.485419f,
					0.280776f, 6.592579f, -0.412689f,
					0.450324f, 6.590112f, -0.191601f,
					1.024746f, 6.406730f, -0.000625f,
					3.122731f, 5.857877f, 1.328642f,
					3.400121f, 5.900944f, 0.000062f,
					2.434070f, 5.965838f, 2.445770f,
					1.328642f, 5.857877f, 3.122731f,
					-0.000062f, 5.900944f, 3.400121f,
					0.000625f, 6.406730f, 1.024746f,
					-1.328642f, 5.857877f, 3.122731f,
					-2.445770f, 5.965838f, 2.434070f,
					-3.122731f, 5.857877f, 1.328642f,
					-3.400121f, 5.900944f, -0.000062f,
					-1.024746f, 6.406730f, 0.000625f,
					-3.122731f, 5.857877f, -1.328642f,
					-2.434070f, 5.965838f, -2.445770f,
					-1.328642f, 5.857877f, -3.122731f,
					0.000062f, 5.900944f, -3.400121f,
					-0.000625f, 6.406730f, -1.024746f,
					1.328642f, 5.857877f, -3.122731f,
					2.445771f, 5.965838f, -2.434070f,
					3.122731f, 5.857877f, -1.328642f
				};

			m_VerticesCount = sizeof(vertices)/sizeof(float);
			m_Vertices = new float[m_VerticesCount];

			for(unsigned int i = 0 ; i < m_VerticesCount ; i++)
			{
				m_Vertices[i] = vertices[i];
			}

			unsigned int indices[] = {
					3, 4, 1,
					1, 4, 2,
					6, 3, 5,
					5, 3, 1,
					8, 6, 7,
					7, 6, 5,
					8, 7, 10,
					10, 7, 9,
					10, 9, 12,
					12, 9, 11,
					12, 11, 14,
					14, 11, 13,
					14, 13, 16,
					16, 13, 15,
					18, 16, 17,
					17, 16, 15,
					20, 18, 19,
					19, 18, 17,
					22, 20, 21,
					21, 20, 19,
					24, 22, 23,
					23, 22, 21,
					24, 23, 26,
					26, 23, 25,
					28, 26, 27,
					27, 26, 25,
					30, 28, 29,
					29, 28, 27,
					32, 30, 31,
					31, 30, 29,
					32, 31, 4,
					4, 31, 2,
					34, 4, 33,
					33, 4, 3,
					36, 34, 35,
					35, 34, 33,
					37, 33, 6,
					6, 33, 3,
					38, 35, 37,
					37, 35, 33,
					37, 6, 39,
					39, 6, 8,
					38, 37, 40,
					40, 37, 39,
					41, 39, 10,
					10, 39, 8,
					42, 40, 41,
					41, 40, 39,
					43, 41, 12,
					12, 41, 10,
					42, 41, 44,
					44, 41, 43,
					45, 43, 14,
					14, 43, 12,
					44, 43, 46,
					46, 43, 45,
					45, 14, 47,
					47, 14, 16,
					46, 45, 48,
					48, 45, 47,
					49, 47, 18,
					18, 47, 16,
					50, 48, 49,
					49, 48, 47,
					51, 49, 20,
					20, 49, 18,
					50, 49, 52,
					52, 49, 51,
					53, 51, 22,
					22, 51, 20,
					52, 51, 54,
					54, 51, 53,
					53, 22, 55,
					55, 22, 24,
					54, 53, 56,
					56, 53, 55,
					57, 55, 26,
					26, 55, 24,
					58, 56, 57,
					57, 56, 55,
					59, 57, 28,
					28, 57, 26,
					58, 57, 60,
					60, 57, 59,
					61, 59, 30,
					30, 59, 28,
					60, 59, 62,
					62, 59, 61,
					61, 30, 63,
					63, 30, 32,
					62, 61, 64,
					64, 61, 63,
					34, 63, 4,
					4, 63, 32,
					36, 64, 34,
					34, 64, 63,
					66, 36, 65,
					65, 36, 35,
					67, 68, 65,
					65, 68, 66,
					65, 35, 69,
					69, 35, 38,
					67, 65, 70,
					70, 65, 69,
					71, 69, 40,
					40, 69, 38,
					70, 69, 72,
					72, 69, 71,
					73, 71, 42,
					42, 71, 40,
					74, 72, 73,
					73, 72, 71,
					73, 42, 75,
					75, 42, 44,
					74, 73, 76,
					76, 73, 75,
					75, 44, 77,
					77, 44, 46,
					78, 76, 77,
					77, 76, 75,
					77, 46, 79,
					79, 46, 48,
					78, 77, 80,
					80, 77, 79,
					81, 79, 50,
					50, 79, 48,
					80, 79, 82,
					82, 79, 81,
					81, 50, 83,
					83, 50, 52,
					84, 82, 83,
					83, 82, 81,
					83, 52, 85,
					85, 52, 54,
					84, 83, 86,
					86, 83, 85,
					87, 85, 56,
					56, 85, 54,
					86, 85, 88,
					88, 85, 87,
					89, 87, 58,
					58, 87, 56,
					90, 88, 89,
					89, 88, 87,
					89, 58, 91,
					91, 58, 60,
					92, 90, 91,
					91, 90, 89,
					91, 60, 93,
					93, 60, 62,
					92, 91, 94,
					94, 91, 93,
					95, 93, 64,
					64, 93, 62,
					94, 93, 96,
					96, 93, 95,
					66, 95, 36,
					36, 95, 64,
					68, 96, 66,
					66, 96, 95,
					67, 97, 68,
					100, 97, 67,
					100, 98, 97,
					99, 98, 107,
					107, 98, 100,
					100, 67, 70,
					101, 70, 72,
					101, 100, 70,
					101, 107, 100,
					74, 101, 72,
					102, 101, 74,
					103, 74, 76,
					103, 102, 74,
					78, 103, 76,
					104, 103, 78,
					104, 78, 80,
					105, 80, 82,
					105, 104, 80,
					105, 107, 104,
					84, 105, 82,
					106, 105, 84,
					106, 84, 86,
					108, 86, 88,
					108, 106, 86,
					108, 107, 106,
					90, 108, 88,
					109, 108, 90,
					109, 90, 110,
					110, 90, 92,
					110, 92, 94,
					112, 94, 96,
					112, 110, 94,
					99, 111, 112,
					112, 111, 110,
					112, 96, 97,
					97, 96, 68,
					98, 99, 97,
					97, 99, 112,
					118, 115, 114,
					114, 115, 113,
					117, 115, 116,
					116, 115, 118,
					121, 116, 118,
					119, 118, 120,
					120, 118, 114,
					121, 118, 119,
					119, 120, 122,
					122, 120, 123,
					124, 119, 122,
					125, 121, 124,
					124, 121, 119,
					126, 122, 127,
					127, 122, 123,
					126, 124, 122,
					125, 124, 128,
					128, 124, 126,
					126, 127, 129,
					130, 128, 126,
					115, 126, 129,
					130, 126, 115,
					115, 129, 113,
					117, 130, 115,
					134, 131, 116,
					116, 131, 117,
					134, 132, 131,
					133, 132, 135,
					135, 132, 134,
					134, 116, 121,
					136, 134, 121,
					137, 134, 136,
					138, 135, 137,
					137, 135, 134,
					136, 121, 139,
					139, 121, 125,
					137, 136, 140,
					140, 136, 139,
					141, 138, 140,
					140, 138, 137,
					128, 139, 125,
					143, 139, 128,
					143, 140, 139,
					141, 140, 142,
					142, 140, 143,
					143, 128, 130,
					145, 142, 143,
					144, 143, 130,
					145, 143, 144,
					144, 130, 131,
					131, 130, 117,
					132, 144, 131,
					133, 145, 132,
					132, 145, 144,
					147, 148, 146,
					146, 148, 149,
					155, 150, 146,
					146, 150, 147,
					155, 151, 150,
					153, 151, 152,
					152, 151, 155,
					159, 146, 154,
					154, 146, 149,
					159, 155, 146,
					156, 152, 155,
					159, 154, 157,
					157, 154, 158,
					160, 155, 159,
					161, 156, 160,
					160, 156, 155,
					157, 158, 162,
					162, 158, 163,
					164, 159, 162,
					162, 159, 157,
					165, 160, 164,
					164, 160, 159,
					166, 161, 165,
					165, 161, 160,
					167, 162, 168,
					168, 162, 163,
					167, 164, 162,
					165, 164, 169,
					169, 164, 167,
					166, 165, 170,
					170, 165, 169,
					171, 167, 172,
					172, 167, 168,
					169, 167, 176,
					176, 167, 171,
					170, 169, 173,
					173, 169, 176,
					174, 171, 175,
					175, 171, 172,
					176, 171, 174,
					177, 173, 176,
					147, 174, 148,
					148, 174, 175,
					176, 174, 150,
					150, 174, 147,
					151, 176, 150,
					153, 177, 151,
					151, 177, 176,
					152, 179, 153,
					178, 179, 152,
					161, 152, 156,
					161, 178, 152,
					180, 178, 161,
					166, 180, 161,
					181, 180, 166,
					182, 181, 170,
					170, 181, 166,
					183, 173, 177,
					183, 170, 173,
					183, 182, 170,
					183, 177, 179,
					179, 177, 153,
					184, 185, 186,
					187, 186, 185,
					189, 188, 187,
					193, 187, 185,
					189, 187, 193,
					184, 190, 185,
					191, 189, 193,
					193, 185, 190,
					184, 192, 190,
					193, 190, 192,
					194, 191, 193,
					199, 193, 192,
					194, 193, 199,
					184, 195, 192,
					196, 194, 199,
					199, 192, 195,
					197, 196, 199,
					184, 198, 195,
					199, 195, 198,
					200, 197, 199,
					205, 199, 198,
					200, 199, 205,
					184, 201, 198,
					202, 200, 205,
					205, 198, 201,
					203, 202, 205,
					184, 204, 201,
					205, 201, 204,
					206, 203, 205,
					187, 205, 204,
					206, 205, 187,
					184, 186, 204,
					207, 206, 187,
					187, 204, 186,
					188, 207, 187,
					208, 188, 189,
					211, 210, 208,
					209, 210, 211,
					214, 208, 189,
					211, 208, 214,
					214, 189, 191,
					213, 211, 214,
					213, 212, 211,
					214, 191, 194,
					216, 213, 214,
					215, 213, 216,
					219, 214, 194,
					216, 214, 219,
					219, 194, 196,
					219, 196, 197,
					218, 216, 219,
					218, 217, 216,
					219, 197, 200,
					221, 218, 219,
					220, 218, 221,
					224, 219, 200,
					221, 219, 224,
					224, 200, 202,
					224, 202, 203,
					223, 221, 224,
					223, 222, 221,
					224, 203, 206,
					226, 223, 224,
					225, 223, 226,
					208, 224, 206,
					226, 224, 208,
					208, 206, 207,
					208, 207, 188,
					210, 226, 208,
					210, 227, 226,
					101, 102, 107,
					102, 103, 107,
					103, 104, 107,
					105, 106, 107,
					108, 109, 107,
					109, 110, 107,
					110, 111, 107,
					111, 99, 107,
				};

			unsigned int indxCount = sizeof(indices)/sizeof(unsigned int);
			m_Indices = new unsigned int[indxCount];

			for(unsigned int i = 0 ; i < indxCount ; i++)
			{
				m_Indices[i] = indices[i] - 1;
			}
			m_TriangleCount = indxCount/3;
		}
		~Teapot()
		{
			delete [] m_Vertices;
			delete [] m_Indices;
		}
		
		float* GetVertices()
		{
			return m_Vertices;
		}
		
		unsigned int* GetIndices()
		{
			return m_Indices;
		}

		unsigned int TriangleCount()
		{
			return m_TriangleCount;
		}

		unsigned int GetVerticesCount()
		{
			return m_VerticesCount;
		}
		
		/*float[] GetNormals()
		{
			float[] verts = GetVertices();
			short[] inds = GetIndices();
			
			int vLength = verts.length;
			
			Vector3[] vertsVector = new Vector3[verts.length/3];
			Vector3[] normalsVector = new Vector3[verts.length/3];
			
			int j = 0;
			for(int i = 0 ; i < (verts.length/3) ; i++)
			{
				vertsVector[i] = new Vector3();
				normalsVector[i] = new Vector3();
				
				vertsVector[i].x = verts[j++];
				vertsVector[i].y = verts[j++];
				vertsVector[i].z = verts[j++];
			}
			
			short[] triangleShareCount = new short[verts.length/3];
			
			MathUtils.ComputeTotalNormalsFromTriangleList(vertsVector, inds,normalsVector,triangleShareCount);
			
			float[] finalNormals = new float[verts.length];
			
			int normalCount = normalsVector.length;
			
			j = 0;
			for(int i = 0 ; i < normalCount ; i++)
			{
				finalNormals[j++] = normalsVector[i].x;
				finalNormals[j++] = normalsVector[i].y;
				finalNormals[j++] = normalsVector[i].z;
			}
			
			return finalNormals;
		}*/
	};
}

#endif